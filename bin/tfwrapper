#!/usr/bin/env python3
"""Python wrapper for Terraform."""

import os
import sys
from subprocess import Popen
import json
import yaml
import argparse
from copy import deepcopy
from pathlib import Path
from schema import Schema, SchemaError, Optional
from termcolor import colored
from botocore.credentials import JSONFileCache
from botocore.exceptions import ClientError, BotoCoreError, ProfileNotFound
import botocore.session
import boto3

DEFAULT_CONFDIR='.wrapper.d'

WRAPPER_CONFIG_SCHEMA = {
    'profile': str,
    'region': str,
    'bucket': str,
    'dynamodb_table': str
}

STACK_CONFIG_SCHEMA = {
    'profile': str,
    'partition': str,
    Optional('terraform'): {
        Optional('vars'): {
            str: str
        }
    }
}

WRAPPER_SUBCOMMANDS = [
    'apply',
    'console',
    'destroy',
    'fmt',
    'force-unlock',
    'get',
    'graph',
    'import',
    'init',
    'output',
    'plan',
    'providers',
    'push',
    'refresh',
    'show',
    'state',
    'taint',
    'untaint',
    'validate',
    'version',
    'workspace'
]


def get_cached_session(**kwargs):
    botocore_session = botocore.session.get_session()
    kwargs['botocore_session'] = botocore_session
    session = boto3.session.Session(**kwargs)
    botocore_session.get_component('credential_provider').get_provider('assume-role').cache = JSONFileCache()
    return session


def run_terraform(action, context):
    """Run Terraform command."""
    # support for custom parameters
    command = ["terraform", action]

    params = context['params']
    if len(params) > 0 and params[0] == '--':
        params.pop(0)
    command.extend(params)

    cwd = Path(context['rootdir'], context['application'], context['environment'], context['region'], context['stack'])
    with Popen(command, cwd=str(cwd)) as process:
        try:
            process.communicate()
        except:
            process.kill()
            process.wait()
            raise
        return process.poll()


def terraform_apply(context):
    """Terraform apply wrapper function."""
    return run_terraform('apply', context)


def terraform_console(context):
    """Terraform console wrapper function."""
    return run_terraform('console', context)


def terraform_destroy(context):
    """Terraform destroy wrapper function."""
    return run_terraform('destroy', context)


def terraform_fmt(context):
    """Terraform fmt wrapper function."""
    return run_terraform('fmt', context)


def terraform_force_unlock(context):
    """Terraform force-unlock wrapper function."""
    return run_terraform('force-unlock', context)


def terraform_get(context):
    """Terraform get wrapper function."""
    # force update
    context['params'].append('-update=true')
    return run_terraform('get', context)


def terraform_graph(context):
    """Terraform graph wrapper function."""
    return run_terraform('graph', context)


def terraform_import(context):
    """Terraform import wrapper function."""
    return run_terraform('import', context)


def terraform_init(context):
    """Terraform init wrapper function."""
    
    backend_config = {
        'region': context['state_config']['region'],
        'bucket': context['state_config']['bucket'],
        'key': '{}/{}/{}/{}/{}/terraform.state'.format(context['stack_config']['partition'],
                                                       context['application'],
                                                       context['environment'],
                                                       context['region'],
                                                       context['stack']),
        'dynamodb_table': context['state_config']['dynamodb_table']
    }

    for k,v in backend_config.items():
        context['params'].append('-backend-config={}={}'.format(k, v))

    return run_terraform('init', context)


def terraform_output(context):
    """Terraform output wrapper function."""
    return run_terraform('output', context)


def terraform_plan(context):
    """Terraform plan wrapper function."""
    return run_terraform('plan', context)

def terraform_providers(context):
    """Terraform providers wrapper function."""
    return run_terraform('providers', context)


def terraform_push(context):
    """Terraform push wrapper function."""
    return run_terraform('push', context)


def terraform_refresh(context):
    """Terraform refresh wrapper function."""
    return run_terraform('refresh', context)


def terraform_show(context):
    """Terraform show wrapper function."""
    return run_terraform('show', context)


def terraform_state(context):
    """Terraform state wrapper function."""
    return run_terraform('state', context)


def terraform_taint(context):
    """Terraform taint wrapper function."""
    return run_terraform('taint', context)


def terraform_untaint(context):
    """Terraform untaint wrapper function."""
    return run_terraform('untaint', context)


def terraform_validate(context):
    """Terraform validate wrapper function."""
    return run_terraform('validate', context)


def terraform_version(context):
    """Terraform version wrapper function."""
    return run_terraform('version', context)


def terraform_workspace(context):
    """Terraform workspace wrapper function."""
    return run_terraform('workspace', context)


def main():
    """Main function."""
    # terraforms params doc
    params_help = 'Any Terraform parameters after a "--" delimiter'

    # argparse
    parser = argparse.ArgumentParser(description='Terraform wrapper.')
    parser.add_argument('-c', '--configuration-directory',
                        help='Configuration file. Used to detect the project root. Defaults to {}.'.format(DEFAULT_CONFDIR),
                        default=DEFAULT_CONFDIR,
                        dest='confdir')
    parser.add_argument('-a', '--application',
                        help='Target application. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-e', '--environment',
                        help='Target environment. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-r', '--region',
                        help='Target region. Autodetected if none is provided.',
                        nargs='?')
    parser.add_argument('-s', '--stack',
                        help='Target stack. Autodetected if none is provided.',
                        nargs='?')

    subparsers = parser.add_subparsers(dest='subcommand', help='subcommands')
    for subcommand in WRAPPER_SUBCOMMANDS:
        parser_subcommand = subparsers.add_parser(subcommand, help='terraform {}'.format(subcommand))
        parser_subcommand.set_defaults(func=getattr(sys.modules[__name__], "terraform_%s" % subcommand.replace('-', '_')))
        parser_subcommand.add_argument('params', nargs=argparse.REMAINDER, help=params_help)

    args = parser.parse_args()
    context = {}

    # detect rootdir location
    parents_list = ['application', 'environment', 'region', 'stack']
    parents_count = 0
    context['rootdir'] = None
    while parents_count <= len(parents_list):
        if os.path.isdir('../' * parents_count + args.confdir):
            context['rootdir'] = os.path.abspath('../' * parents_count)
            context['confdir'] = args.confdir
            break
        parents_count += 1

    if context['rootdir'] is None:
        print("Cannot find configuration directory '{}' in this directory or above".format(args.confdir),
              file=sys.stderr)
        sys.exit(1)
        
    for element in parents_list:
        context[element] = getattr(args, element)

    # detect parent dirs
    count_up = 0
    count_down = parents_count
    while count_down > 0:
        element = parents_list[count_up]
        if context[element] is None:
            context[element] = os.path.basename(os.path.abspath('./' + '../' * (count_down - 1)))
        count_down -= 1
        count_up += 1
        
    for element in parents_list:
        if context[element] is None:
            print("{} cannot be autodetected. Exiting...".format(element),
                  file=sys.stderr)
            sys.exit(1)

    # load state configuration
    state_config_file = Path(context['rootdir'], context['confdir'], 'state.yml')
    try:
        with open(str(state_config_file), 'r') as f:
            context['state_config'] = yaml.load(f)
    except OSError as e:
        print(colored('Failed to open file {}: {}'.format(state_config_file, e.strerror), 'red'), file=sys.stderr)
        sys.exit(1)

    try:
        Schema(WRAPPER_CONFIG_SCHEMA).validate(context['state_config'])
    except SchemaError as e:
        print(colored('Configuration error in {}:'.format(state_config_file), 'red'), file=sys.stderr)
        print(e, file=sys.stderr)
        sys.exit(1)

    # load stack configuration
    stack_config_file = Path(context['rootdir'], context['confdir'],
                             '{}_{}_{}_{}.yml'.format(context['application'], context['environment'], context['region'], context['stack']))
    try:
        with open(str(stack_config_file), 'r') as f:
            context['stack_config'] = yaml.load(f)
    except OSError as e:
        print(colored('Failed to open file {}: {}'.format(stack_config_file, e.strerror), 'red'), file=sys.stderr)
        sys.exit(1)

    try:
        Schema(STACK_CONFIG_SCHEMA).validate(context['stack_config'])
    except SchemaError as e:
        print(colored('Configuration error in {}:'.format(stack_config_file), 'red'), file=sys.stderr)
        print(e, file=sys.stderr)
        sys.exit(1)

    
    print(colored('Getting state session', 'yellow'), file=sys.stderr)
    try:
        state_session = get_cached_session(profile_name=context['state_config']['profile'])
        state_credentials = state_session.get_credentials().get_frozen_credentials()
    except (ClientError, ProfileNotFound) as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    os.environ['AWS_ACCESS_KEY_ID'] = state_credentials.access_key
    os.environ['AWS_SECRET_ACCESS_KEY'] = state_credentials.secret_key
    os.environ['AWS_SESSION_TOKEN'] = state_credentials.token

    print(colored('Getting stack session', 'yellow'), file=sys.stderr)
    try:
        stack_session = get_cached_session(profile_name=context['stack_config']['profile'])
        stack_credentials = stack_session.get_credentials().get_frozen_credentials()
        stack_identity = stack_session.client('sts').get_caller_identity()
    except (ClientError, ProfileNotFound) as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)

    if 'terraform' in context['stack_config']:
        if 'vars' in context['stack_config']['terraform']:
            terraform_vars = context['stack_config']['terraform']['vars']
    else:
        terraform_vars = dict()
    terraform_vars['partition'] = context['stack_config']['partition']
    terraform_vars['application'] = context['application']
    terraform_vars['environment'] = context['environment']
    terraform_vars['aws_region'] = context['region']
    terraform_vars['stack'] = context['stack']
    terraform_vars['aws_access_key'] = stack_credentials.access_key
    terraform_vars['aws_secret_key'] = stack_credentials.secret_key
    terraform_vars['aws_token'] = stack_credentials.token
    terraform_vars['aws_account'] = stack_identity['Account']

    for k,v in terraform_vars.items():
        if v is not None:
            os.environ['TF_VAR_{}'.format(k)] = str(v)

    # call subcommand
    returncode = 0
    if hasattr(args, 'func'):
        context['params'] = args.params
        returncode = args.func(context)
    else:
        parser.print_help(file=sys.stderr)

    sys.exit(returncode)
            
if __name__ == "__main__":
    main()
